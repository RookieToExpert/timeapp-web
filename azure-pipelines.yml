# ===== timeapp（web + api）多仓库构建 + 部署 =====
parameters:
- name: major
  displayName: "Major version (e.g., 1 -> 1.1, 1.2, ...)"
  type: string
  default: '1'

# self 仓库（timeapp-web）用根级触发
trigger:
  branches:
    include: [ main ]

# 另一仓库（timeapp-api）作为资源并开启触发
resources:
  repositories:
  - repository: apiRepo
    type: github
    name: RookieToExpert/timeapp-api
    endpoint: RookieToExpert
    ref: refs/heads/main
    trigger:
      branches: { include: [ main ] }

# —— 关键修正：先把参数变成变量，再用 counter() ——
variables:
- name: dockerHubSC
  value: toDockerHub
- name: k8sSC
  value: k8s-sc

- name: repoWeb
  value: rayrayye/timeapp-web
- name: repoApi
  value: rayrayye/timeapp-api-new

- name: ns
  value: timeapp
- name: deployWeb
  value: web
- name: deployApi
  value: web-api
- name: containerWeb
  value: web
- name: containerApi
  value: api

# 用参数生成一个普通变量（编译期替换）
- name: majorVar
  value: ${{ parameters.major }}

# 用 counter() 基于 majorVar 计数（运行期计算）
- name: patch
  value: $[ counter(variables['majorVar'], 1) ]

stages:
# ===== CI =====
- stage: BuildPush
  displayName: Build & Push images
  jobs:
  - job: Build
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - checkout: self
      path: s/web
    - checkout: apiRepo
      path: s/api

    - bash: |
        echo "Using version: $(majorVar).$(patch)"
      displayName: Show version

    - task: Docker@2
      displayName: Login Docker Hub
      inputs:
        command: login
        containerRegistry: '$(dockerHubSC)'

    - task: Docker@2
      displayName: Build+Push web
      inputs:
        command: buildAndPush
        repository: '$(repoWeb)'
        # 注意：你的 web 仓库是小写 dockerfile；如改回 Dockerfile，请同步改这里
        Dockerfile: '$(Pipeline.Workspace)/s/web/dockerfile'
        buildContext: '$(Pipeline.Workspace)/s/web'
        tags: |
          $(majorVar).$(patch)
          latest

    - task: Docker@2
      displayName: Build+Push api
      inputs:
        command: buildAndPush
        repository: '$(repoApi)'
        Dockerfile: '$(Pipeline.Workspace)/s/api/dockerfile'
        buildContext: '$(Pipeline.Workspace)/s/api'
        tags: |
          $(majorVar).$(patch)
          latest

# ===== CD =====
- stage: Deploy
  displayName: Deploy to timeapp
  dependsOn: BuildPush
  jobs:
  - job: K8s
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - task: Kubernetes@1
      displayName: Set image (web)
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: '$(k8sSC)'
        namespace: '$(ns)'
        command: 'set'
        arguments: >
          image deployment/$(deployWeb)
          $(containerWeb)=docker.io/$(repoWeb):$(majorVar).$(patch)

    - task: Kubernetes@1
      displayName: Set image (web-api)
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: '$(k8sSC)'
        namespace: '$(ns)'
        command: 'set'
        arguments: >
          image deployment/$(deployApi)
          $(containerApi)=docker.io/$(repoApi):$(majorVar).$(patch)

    - task: Kubernetes@1
      displayName: Wait rollout (web)
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: '$(k8sSC)'
        namespace: '$(ns)'
        command: 'rollout'
        arguments: 'status deployment/$(deployWeb) --timeout=180s'

    - task: Kubernetes@1
      displayName: Wait rollout (web-api)
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: '$(k8sSC)'
        namespace: '$(ns)'
        command: 'rollout'
        arguments: 'status deployment/$(deployApi) --timeout=180s'

trigger:
  branches:
    include: [ main ]
pr:
  branches:
    include: [ main ]

variables:
  dockerHubRepo: 'rayrayye/timeapp-web'
  dockerfilePath: 'Dockerfile'
  buildContext: '.'
  DOCKER_SERVICE_CONNECTION: 'toDockerHub'

  major: '1'
  counterKey: 'timeapp-web-1'
  patch: $[ counter(variables['counterKey'], 0) ]
  version: '$(major).$(patch)'

  GITHUB_REPO: 'RookieToExpert/az305'
  IMG_NAME: 'rayrayye/timeapp-web'       # 不带 docker.io 前缀，和 overlays/prod 里一致

stages:
- stage: Build
  displayName: Build & Push web
  jobs:
  - job: build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Login Docker Hub
      inputs:
        command: login
        containerRegistry: '$(DOCKER_SERVICE_CONNECTION)'

    - task: Docker@2
      displayName: Build+Push web:$(version)
      inputs:
        command: buildAndPush
        repository: '$(dockerHubRepo)'
        Dockerfile: '$(dockerfilePath)'
        buildContext: '$(buildContext)'
        # buildArguments: |
        #   --platform=linux/amd64
        tags: |
          $(version)
          # latest

- stage: PR
  displayName: Create PR to bump web tag (GitOps)
  dependsOn: Build
  jobs:
  - job: pr
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - bash: |
        set -euo pipefail
        sudo apt-get update -y
        sudo apt-get install -y jq
        YQ_VER="v4.44.3"
        sudo curl -fsSL -o /usr/local/bin/yq \
          "https://github.com/mikefarah/yq/releases/download/${YQ_VER}/yq_linux_amd64"
        sudo chmod +x /usr/local/bin/yq
      displayName: 'Install yq & jq'

    - bash: |
        set -euo pipefail

        git config --global user.name  "ado-bot"
        git config --global user.email "ado-bot@example.com"

        GIT_URL="https://${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git"
        git clone "$GIT_URL" configrepo
        cd configrepo

        BR="bump-web-$(version)-$(Build.BuildId)"
        git switch -c "$BR"

        echo "[info] searching kustomization.yaml …"
        mapfile -t CANDIDATES < <(
          git ls-files | grep -E 'timeapp-config(/.*)?/overlays(/.*)?/kustomization\.yaml$' || true
        )

        if [ ${#CANDIDATES[@]} -eq 0 ]; then
          echo "[error] no kustomization.yaml found under timeapp-config/**/overlays/**"
          echo "[hint] example: kubernetes-docker/timeapp-config/overlays/prod/kustomization.yaml"
          exit 1
        fi

        echo "[info] candidates:"; printf ' - %s\n' "${CANDIDATES[@]}"

        FILE=""
        for f in "${CANDIDATES[@]}"; do
          [[ "$f" =~ /overlays/prod/ ]] && FILE="$f" && break
        done
        [[ -z "$FILE" ]] && FILE="${CANDIDATES[0]}"
        echo "[info] using kustomization: $FILE"

        # 兼容 images.name / images.newName 两种写法，更新 web 的 tag
        yq -i '
          (.images[] | select(
              (.name == env(IMG_NAME)) or
              (.newName == env(IMG_NAME))
          )).newTag = env(VERSION)
        ' "$FILE"

        git add "$FILE"
        if git diff --cached --quiet; then
          echo "[info] nothing changed (tag already ${VERSION})."
          exit 0
        fi

        git commit -m "chore(web): bump to ${VERSION}"
        git push -u origin "$BR"

        DATA=$(jq -n \
          --arg title "Bump web to ${VERSION}" \
          --arg body  "Update web image tag to ${VERSION} for GitOps" \
          --arg head  "$BR" \
          --arg base  "main" \
          '{title:$title, body:$body, head:$head, base:$base}')

        RESP=$(curl -sS -X POST "https://api.github.com/repos/${GITHUB_REPO}/pulls" \
          -H "Authorization: token ${GITHUB_TOKEN}" \
          -H "Accept: application/vnd.github+json" \
          -d "$DATA")

        echo "[PR] $(echo "$RESP" | jq -r '.html_url')"
      displayName: 'Bump web tag & open PR (auto-locate)'
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)
        GITHUB_REPO:  $(GITHUB_REPO)
        IMG_NAME:     $(IMG_NAME)
        VERSION:      $(version)
